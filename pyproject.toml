####################################################################################################
####### PLEASE READ THE CONTRIBUTING DOCUMENT FIRST BEFORE APPLYING ANY CHANGES TO THIS FILE #######
########################################### SLICKML TEAM ###########################################
####################################################################################################

[tool.poetry]
name = "slickml"
version = "0.2.0-beta.1"
description = "SlickML: Slick Machine Learning in Python"
license = "MIT"
authors = [
    "Amirhessam Tahmassebi <admin@slickml.com>",
]
maintainers = [
    "Amirhessam Tahmassebi <admin@slickml.com>",
]
readme = "README.md"
homepage = "https://www.slickml.com"
repository = "https://github.com/slickml/slick-ml"
documentation = "https://www.docs.slickml.com"
keywords = [
    "python",
    "data-science",
    "machine-learning",
]

# TODO(amir): update status to Development Status :: 5 - Production/Stable for v0.2.0
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
packages = [
    { include = "slickml", from = "src" },
]
include = ["src/slickml", "*.md"]
exclude = [
    "docs",
    "assets",
    "tests",
    "examples",
]


[tool.poetry.dependencies]
python = ">=3.8,<3.11"

# --- scientific-computing ---
# TODO(amir): since numpy "^1.23" distutils is deprecated which glmnet needs it
# wait for `glmnet` for a new release; then upgrade this 
numpy = "^1.22,<1.23"
pandas = "^1.5"
scipy = "^1.9"
statsmodels = "^0.13"

# --- machine-learning ---
scikit-learn = "^1.1"
xgboost = "^1.6"
glmnet = "^2.2"
shap = "^0.41"

# --- optimization ----
bayesian-optimization = "^1.2"
hyperopt = "^0.2"

# --- visualization ---
# TODO(amir): matplotlib v>=3.6 comes with breaking changes
# make sure to apply the upgrade and fix the issues once the API refactor is done
matplotlib = "^3.5,<3.6"
seaborn = "^0.12"


[tool.poetry.dev-dependencies]

# --- package-management ---
pip = "^22.2"

# --- task-management ---
poethepoet = "^0.16"

# --- testenv-management ---
tox = "^3.26"

# --- formatting ---
add-trailing-comma = "^2.2"
isort = "^5.10"
black = "^22.8"
jupyter-black = "^0.3"

# --- linting ---
flake8 = "^5.0"
flake8-commas = "^2.1"
# TODO(amir): add flake8-annotations once the API refactor is completed
# - flake8-annotations==2.9.0
# - flake8-broken-line==0.4.0
# - flake8-bugbear==22.7.1
# - flake8-comprehensions==3.10.0
# - flake8-eradicate==1.2.1
# - flake8-quotes==3.3.1
# - flake8-simplify==0.19.3
# - flake8-tidy-imports==4.8.0
# - flake8-type-checking==2.1.0
# - flake8-typing-imports==1.12.0
# - flake8-use-fstring==1.4
# - pep8-naming==0.13.1
mypy = "^0.971"

# --- unit-testing ---
pytest = "^7.1"
pytest-cov = "^3.0"
pytest-mock = "^3.8"
mock = "^4.0"
coverage = "^6.4"
assertpy = "^1.1"

# --- docs ----
sphinx = "^5.1"
sphinx-autoapi = "^1.9"
sphinx_design = "^0.3"
myst-parser = "^0.18"
furo = "^2022.9"

# --- jupyter ---
ipykernel = "^6.15"
jupytext = "^1.14"

# --- monitoring ---
watchdog = "^2.1"


[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"


# -- try `poe --help` for options
[tool.poe.tasks]
greet = { cmd = """echo Welcome to SlickML $USER. The following commands can be used to ease the development process for you. Formatting: `poe format`, Linting: `poe check`, Testing: `poe test`, Environments Testing: `poe tox`""", help = "Runtime user greetings" }
clean = { cmd = "rm -rf .coverage dist/ .mypy_cache/ .pytest_cache/ .tox/ htmlcov/ xmlcov/ **/__pycache__/ **/.ipynb_checkpoints/", help = "Remove all the ignored directories/files" }
add-trailing-comma = { cmd = "poetry run add-trailing-comma --exit-zero-even-if-changed src/**/*.py tests/**/*.py", help = "Format code style via add-trailing-comma" }
black = { cmd = "poetry run black --line-length 100 .", help = "Format code style via black" }
isort = { cmd = "poetry run isort --profile black .", help = "Sort imported libraries via isort" }
flake8 = { cmd = "poetry run flake8 --verbose --benchmark --color always --config .flake8 .", help = "Lint code via flake8" }
mypy = { cmd = "poetry run mypy --verbose --config-file mypy.ini .", help = "Lint types via mypy" }
test = { cmd = "poetry run python -m pytest --cov=src --cov-report=term --cov-report=html --cov-report=xml --cov-config=.coveragerc --tb=short -ra -v", help = "Run unit-tests via pytest" }
sphinx = { cmd = "poetry run sphinx-build -b html docs/ docs/_build", help = "Build API docs via sphinx" }
tox = { cmd = "poetry run tox -c tox.ini .", help = "Test environments via tox" }
format = [
    { ref = "add-trailing-comma" },
    { ref = "isort" },
    { ref = "black" },
]
check = [
    { cmd = "poe black --check" },
    { cmd = "poe isort --check-only" },
    { ref = "flake8" },
    { ref = "mypy" },
]
